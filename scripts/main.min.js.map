{"version":3,"sources":["map.js"],"names":["app","map","init","home","lat","lng","el","document","getElementById","this","google","maps","Map","center","zoom","minZoom","maxZoom","mapTypeControl","placesApi","places","PlacesService","infoWindow","InfoWindow","maxWidth","$","window","width","event","addListener","removeClass","addClass","setTimeout","css","addListenerOnce","getPlaces","request","bounds","getBounds","types","nearbySearch","results","status","forEach","result","idx","place","viewmodel","Place","push","console","log","curPlace","msg","addError","ko","applyBindings","getPlaceDetails","placeId","data","place_id","getDetails","details","deets","PlaceDetails","createMarker","plcloc","geometry","location","marker","Marker","animation","Animation","DROP","attribution","source","icon","title","name","clickHandler"],"mappings":"AACAA,IAAAC,IAAAD,IAAAC,QAEA,WACAD,IAAAC,KAGAC,KAAA,WACA,GAAAC,IAAAC,IAAA,UAAAC,IAAA,YACAC,EAAAC,SAAAC,eAAA,gBAEAC,MAAAR,IAAA,GAAAS,QAAAC,KAAAC,IAAAN,GACAO,OAAAV,EACAW,KAAA,GACAC,QAAA,GACAC,QAAA,GACAC,gBAAA,IAGAR,KAAAS,UAAA,GAAAR,QAAAC,KAAAQ,OAAAC,cAAApB,IAAAC,IAAAA,KACAQ,KAAAY,WAAA,GAAAX,QAAAC,KAAAW,YACAC,SAAA,GAAAC,EAAAC,QAAAC,UAGAhB,OAAAC,KAAAgB,MAAAC,YAAAnB,KAAAY,WAAA,aAAA,WACAG,EAAA,eAAAK,YAAA,QACAL,EAAA,eAAAM,SAAA,YAIAC,WAAA,WACAP,EAAA,eAAAQ,IAAA,UAAA,WACA,KAEAtB,OAAAC,KAAAgB,MAAAM,gBAAAxB,KAAAR,IAAA,iBAAAQ,KAAAyB,YAIAA,UAAA,WAGA,GAAAC,IACAC,OAAApC,IAAAC,IAAAA,IAAAoC,YACAC,OAAA,cAAA,SAAA,QAIAtC,KAAAC,IAAAiB,UAAAqB,aAAAJ,EAAA,SAAAK,EAAAC,GACA,GAAA,OAAAA,EACAD,EAAAE,QAAA,SAAAC,EAAAC,GACA,GAAAC,GAAA,GAAA7C,KAAA8C,UAAAC,MAAAJ,EAEA3C,KAAA8C,UAAA3B,OAAA6B,KAAAH,GACA,IAAAD,IACAK,QAAAC,IAAA,qBACAlD,IAAA8C,UAAAK,SAAAN,UAGA,CACAI,QAAAC,IAAA,yBACA,IAAAE,GAAA,wBAAAX,CACAzC,KAAA8C,UAAAO,SAAAD,GAEAE,GAAAC,cAAAvD,IAAA8C,cAIAU,gBAAA,SAAAX,GAEA,GAAAV,IACAsB,QAAAZ,EAAAa,KAAAC,SAGA3D,KAAAC,IAAAiB,UAAA0C,WAAAzB,EAAA,SAAA0B,EAAApB,GAEA,GADAQ,QAAAC,IAAA,SAAAT,GACA,OAAAA,EAAA,CACA,GAAAqB,GAAA,GAAA9D,KAAA8C,UAAAiB,aAAAF,EACAhB,GAAAgB,QAAAC,OACA,CACA,GAAAV,GAAA,8CAAAX,CACAzC,KAAA8C,UAAAO,SAAAD,OAKAY,aAAA,SAAAnB,GAGA,GAAAoB,GAAApB,EAAAa,KAAAQ,SAAAC,SAEAC,EAAA,GAAA1D,QAAAC,KAAA0D,QACAC,UAAA5D,OAAAC,KAAA4D,UAAAC,KACAC,aAAAC,OAAA,wCACAC,KAAA9B,EAAAa,KAAAiB,KACA1E,IAAAD,IAAAC,IAAAA,IAEA4C,OACAsB,UAAA/D,IAAA6D,EAAA7D,MAAAC,IAAA4D,EAAA5D,OACAoD,QAAAZ,EAAAa,KAAAC,UAEAiB,MAAA/B,EAAAa,KAAAmB,MAMA,OAHAnE,QAAAC,KAAAgB,MAAAC,YAAAwC,EAAA,QAAA,WACApE,IAAA8C,UAAAgC,aAAAjC,KAEAuB","file":"main.min.js","sourcesContent":["/* global app document google $ window ko */\napp.map = app.map || {};\n\n(function() {\n  app.map = {\n    // Callback function for Google Maps - Initialize the Map\n    // Calls getPlaces and createMarker to fill ViewModel places array\n    init: function() {\n      var home = {lat: 39.927677, lng: -75.171909};\n      var el = document.getElementById('map-container');\n\n      this.map = new google.maps.Map(el, {\n        center: home,\n        zoom: 14,\n        minZoom: 12,\n        maxZoom: 18,\n        mapTypeControl: false\n      });\n      // console.log('Map init'); // REMOVE\n      this.placesApi = new google.maps.places.PlacesService(app.map.map);\n      this.infoWindow = new google.maps.InfoWindow({\n        maxWidth: $(window).width() * 0.7}\n      );\n      // Show the drawer button when infowindow closes\n      google.maps.event.addListener(this.infoWindow, 'closeclick', function() {\n        $('#drawer-btn').removeClass('open');\n        $('#drawer-btn').addClass('closed');\n      });\n\n      // Show error message - if maps can't be reached it will be visible\n      setTimeout(function() {\n        $('#maps-error').css('display', 'inline');\n      }, 5000);\n      // Load places once the maps bounds are set\n      google.maps.event.addListenerOnce(this.map, 'bounds_changed', this.getPlaces);\n    },\n\n    // Get a list of places from Google Maps\n    getPlaces: function() {\n      // console.log('Map getPlaces'); // REMOVE\n      // Variables for the request\n      var request = {\n        bounds: app.map.map.getBounds(),\n        types: ['art_gallery', 'museum', 'park']\n      };\n\n      // Call the Places API\n      app.map.placesApi.nearbySearch(request, function(results, status) {\n        if (status === 'OK') {\n          results.forEach(function(result, idx) {\n            var place = new app.viewmodel.Place(result);\n\n            app.viewmodel.places.push(place);\n            if (idx === 1) {\n              console.log('set current place');\n              app.viewmodel.curPlace(place);\n            }\n          });\n        } else {\n          console.log('We have a places error');\n          var msg = 'Google Places Error: ' + status;\n          app.viewmodel.addError(msg);\n        }\n        ko.applyBindings(app.viewmodel);\n      });\n    },\n\n    getPlaceDetails: function(place) {\n      // console.log('Map getPlaceDetails'); // REMOVE\n      var request = {\n        placeId: place.data.place_id\n      };\n      // Call the Places API, add details to the place\n      app.map.placesApi.getDetails(request, function(details, status) {\n        console.log('status', status);\n        if (status === 'OK') {\n          var deets = new app.viewmodel.PlaceDetails(details);\n          place.details(deets);\n        } else {\n          var msg = 'Google Places Error while getting details: ' + status;\n          app.viewmodel.addError(msg);\n        }\n      });\n    },\n\n    createMarker: function(place) {\n      // console.log('Map createMarker'); // REMOVE\n      // Location for the Marker\n      var plcloc = place.data.geometry.location;\n      // Create the marker\n      var marker = new google.maps.Marker({\n        animation: google.maps.Animation.DROP,\n        attribution: {source: 'mrkjesus2.github.io/Neighborhood-Map'},\n        icon: place.data.icon,\n        map: app.map.map,\n        // optimized: false,  // If problems with animation, uncomment //REMOVE\n        place: {\n          location: {lat: plcloc.lat(), lng: plcloc.lng()},\n          placeId: place.data.place_id\n        },\n        title: place.data.name\n      });\n\n      google.maps.event.addListener(marker, 'click', function() {\n        app.viewmodel.clickHandler(place);\n      });\n      return marker;\n    }\n  };\n})();\n"],"sourceRoot":"/source/"}