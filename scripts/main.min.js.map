{"version":3,"sources":["map.js","viewModel.js"],"names":["app","map","init","home","lat","lng","el","document","getElementById","this","google","maps","Map","center","zoom","minZoom","maxZoom","mapTypeControl","placesApi","places","PlacesService","infoWindow","InfoWindow","maxWidth","$","window","width","event","addListener","removeClass","addClass","setTimeout","css","addListenerOnce","getPlaces","createPlaces","forEach","place","idx","plc","viewmodel","Place","push","console","log","curPlace","storePlaces","localStorage","setItem","JSON","stringify","retrievePlaces","parse","geometry","location","ko","applyBindings","request","bounds","getBounds","types","nearbySearch","results","status","setPhotoUrls","msg","addError","photos","url","getUrl","maxHeight","getPlaceDetails","placeId","data","place_id","getDetails","details","deets","PlaceDetails","createMarker","plcloc","marker","Marker","animation","Animation","DROP","attribution","source","icon","title","name","clickHandler","observableArray","curMarker","observable","inputText","frsqr","errorMsg","show","rating","open","opening_hours","photo","height","attributions","html_attributions","detailsIcon","wikiInfo","frSqrInfo","WikiPage","page","content","extract","fullurl","fourSquare","info","tips","mapping","fromJS","frSqrTips","address","formatted_address","phone","formatted_phone_number","website","reviews","Reviews","arr","review","author","author_name","authorUrl","author_url","text","time","clearErrors","setCurrentPlace","getAnimation","toggleBounce","toggleDetails","undefined","clickContactInfo","trigger","close","closeDrawer","toggleDrawer","wiki","getWiki","foursquare","findPlace","setInfoWindow","placeFilter","self","matches","filter","toLowerCase","input","indexOf","setMap","resetFilter","setAnimation","BOUNCE","html","setContent","els","getElementsByClassName","toggleClass","hasClass","openModal","closeModal","button","addEventListener"],"mappings":"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","file":"main.min.js","sourcesContent":["/* global app document google $ window ko localStorage */\napp.map = app.map || {};\n\n(function() {\n  app.map = {\n    // Callback function for Google Maps - Initialize the Map\n    // Calls getPlaces and createMarker to fill ViewModel places array\n    init: function() {\n      var home = {lat: 39.927677, lng: -75.171909};\n      var el = document.getElementById('map-container');\n\n      this.map = new google.maps.Map(el, {\n        center: home,\n        zoom: 14,\n        minZoom: 12,\n        maxZoom: 18,\n        mapTypeControl: false\n      });\n      // console.log('Map init'); // REMOVE\n      this.placesApi = new google.maps.places.PlacesService(app.map.map);\n      this.infoWindow = new google.maps.InfoWindow({\n        maxWidth: $(window).width() * 0.7}\n      );\n      // Show the drawer button when infowindow closes\n      google.maps.event.addListener(this.infoWindow, 'closeclick', function() {\n        $('#drawer-btn').removeClass('open');\n        $('#drawer-btn').addClass('closed');\n      });\n\n      // Show error message - if maps can't be reached it will be visible\n      setTimeout(function() {\n        $('#maps-error').css('display', 'inline');\n      }, 5000);\n      // Load places once the maps bounds are set\n      google.maps.event.addListenerOnce(this.map, 'bounds_changed', this.getPlaces);\n    },\n\n    createPlaces: function(places) {\n      places.forEach(function(place, idx) {\n        var plc = new app.viewmodel.Place(place);\n\n        app.viewmodel.places.push(plc);\n        if (idx === 1) {\n          console.log('set current place');\n          app.viewmodel.curPlace(plc);\n        }\n      });\n    },\n\n    // Likely against TOS, but figure it's fine for educational purposes\n    storePlaces: function(places) {\n      localStorage.setItem('places', JSON.stringify(places));\n    },\n\n    retrievePlaces: function() {\n      var places = JSON.parse(localStorage.places);\n      places.forEach(function(place) {\n        var lat = place.geometry.location.lat;\n        var lng = place.geometry.location.lng;\n        // Make lat/lng into functions to match API results\n        place.geometry.location.lat = function() {\n          return lat;\n        };\n        place.geometry.location.lng = function() {\n          return lng;\n        };\n      });\n      return places;\n    },\n    // Get a list of places from Google Maps\n    getPlaces: function() {\n      // console.log('Map getPlaces'); // REMOVE\n      if (localStorage.places) {\n        console.log('Creating places from storage');\n        app.map.createPlaces(app.map.retrievePlaces());\n        ko.applyBindings(app.viewmodel);\n      } else {\n        // Variables for the request\n        var request = {\n          bounds: app.map.map.getBounds(),\n          types: ['art_gallery', 'museum', 'park']\n        };\n\n        // Call the Places API\n        app.map.placesApi.nearbySearch(request, function(results, status) {\n          console.log('Calling Places API');\n          if (status === 'OK') {\n            // console.log(results[0]);\n            app.map.setPhotoUrls(results);\n            app.map.storePlaces(results);\n            app.map.createPlaces(results);\n          } else {\n            console.log('We have a places error');\n            var msg = 'Google Places Error: ' + status;\n            app.viewmodel.addError(msg);\n          }\n          ko.applyBindings(app.viewmodel);\n        });\n      }\n    },\n\n    setPhotoUrls: function(places) {\n      places.forEach(function(place) {\n        // console.log(place.photos);\n        if (place.photos) {\n          // TODO: Right image size?\n          var url = place.photos[0].getUrl({maxWidth: 200,\n                                            maxHeight: 200});\n          console.log(typeof url);\n          place.photos[0].url = url;\n          // console.log(place.photos[0]);\n        }\n      });\n    },\n\n    getPlaceDetails: function(place) {\n      // console.log('Map getPlaceDetails'); // REMOVE\n      var request = {\n        placeId: place.data.place_id\n      };\n      // Call the Places API, add details to the place\n      app.map.placesApi.getDetails(request, function(details, status) {\n        console.log('status', status);\n        if (status === 'OK') {\n          var deets = new app.viewmodel.PlaceDetails(details);\n          place.details(deets);\n        } else {\n          var msg = 'Google Places Error while getting details: ' + status;\n          app.viewmodel.addError(msg);\n        }\n      });\n    },\n\n    createMarker: function(place) {\n      // console.log('Map createMarker'); // REMOVE\n      // Location for the Marker\n      var plcloc = place.data.geometry.location;\n      // Create the marker\n      var marker = new google.maps.Marker({\n        animation: google.maps.Animation.DROP,\n        attribution: {source: 'mrkjesus2.github.io/Neighborhood-Map'},\n        icon: place.data.icon,\n        map: app.map.map,\n        // optimized: false,  // If problems with animation, uncomment //REMOVE\n        place: {\n          location: {lat: plcloc.lat(), lng: plcloc.lng()},\n          placeId: place.data.place_id\n        },\n        title: place.data.name\n      });\n\n      google.maps.event.addListener(marker, 'click', function() {\n        app.viewmodel.clickHandler(place);\n      });\n      return marker;\n    }\n  };\n})();\n","// TODO: Get rid of 'REMOVE' lines\n/* global app ko $ google document */\n\napp.viewmodel = app.viewmodel || {};\n\napp.viewmodel = {\n  places: ko.observableArray(),\n  curMarker: null,\n  curPlace: ko.observable(),\n  inputText: ko.observable(''),\n  frsqr: null,\n  errorMsg: ko.observableArray([]),\n\n/* ************* */\n/* Constructors */\n/* ************ */\n  Place: function(place) {\n    this.show = ko.observable(true);\n\n    // Info returned from map.getPlaces\n    this.name = ko.observable(place.name);\n    this.rating = ko.observable(place.rating);\n    this.open = ko.observable(\n      place.opening_hours ? 'Open Now' : 'Closed' || 'Hours not available'\n    );\n    if (place.photos) {\n      this.photo = ko.observable({\n        url: ko.observable(place.photos[0].url),\n        height: ko.observable(place.photos[0].height),\n        width: ko.observable(place.photos[0].width),\n        attributions: ko.observable(place.photos[0].html_attributions)\n      } || {});\n    } else {\n      this.photo = ko.observable('none');\n    }\n    this.data = place;\n    this.detailsIcon = ko.observable('fa fa-chevron-circle-up');\n\n    // Info from elsewhere\n    this.details = ko.observable();\n    this.marker = app.map.createMarker(this);\n    this.wikiInfo = ko.observable();\n    this.frSqrInfo = ko.observable();\n    // this.frSqrInfo.tips = ko.observable();\n    // console.log('Place Constructor');  // REMOVE\n  },\n\n  WikiPage: function(page) {\n    this.content = ko.observable(page.extract);\n    this.url = ko.observable(page.fullurl);\n  },\n\n  fourSquare: function(info, tips, place) {\n    // console.log('FourSquare Constructor'); // REMOVE\n    // Map FourSquare responses to observables\n    var frSqrInfo = ko.mapping.fromJS(info, {});\n    var frSqrTips = ko.mapping.fromJS(tips, {});\n    // Create a child object for tips response\n    frSqrInfo.tips = frSqrTips;\n    // Assign the info to the place\n    place.frSqrInfo(frSqrInfo);\n  },\n\n  PlaceDetails: function(details) {\n    this.show = ko.observable(true);\n    this.address = ko.observable(details.formatted_address);\n    this.phone = ko.observable(details.formatted_phone_number);\n    this.photos = ko.observableArray(details.photos);\n    this.rating = ko.observable(details.rating);\n    this.website = ko.observable(details.website);\n    this.reviews = ko.observableArray(new app.viewmodel.Reviews(details.reviews));\n    // console.log('PlaceDetails'); // REMOVE\n  },\n\n  Reviews: function(reviews) {\n    var arr = [];\n    reviews.forEach(function(review) {\n      arr.push({\n        author: ko.observable(review.author_name),\n        authorUrl: ko.observable(review.author_url),\n        text: ko.observable(review.text),\n        time: ko.observable(review.time)\n      });\n    });\n    return arr;\n  },\n\n/* **************** */\n/* Helper Functions */\n/* **************** */\n  addError: function(msg) {\n    this.errorMsg = this.errorMsg || ko.observableArray([]);\n    this.errorMsg.push(msg);\n    setTimeout(function() {\n      app.viewmodel.clearErrors();\n    }, 2000);\n  },\n\n  clearErrors: function() {\n    this.errorMsg([]);\n  },\n\n  setCurrentPlace: function(place) {\n    // console.log('setCurrentPlace'); // REMOVE\n    if (app.viewmodel.curPlace().marker.getAnimation()) {\n      app.viewmodel.toggleBounce();\n    }\n    app.viewmodel.curPlace(place);\n  },\n\n  toggleDetails: function(place) {\n    if (place.details() !== undefined && place.details().show() === true) {\n      place.details().show(false);\n      place.detailsIcon('fa fa-chevron-circle-up');\n    } else {\n      app.map.getPlaceDetails(place);\n      app.viewmodel.setCurrentPlace(place);\n      place.detailsIcon('fa fa-chevron-circle-down');\n    }\n  },\n\n  clickContactInfo: function() {\n    this.inputText(this.curPlace().name());\n    $('#drawer-top input').trigger('input');\n    this.toggleDetails(app.viewmodel.curPlace());\n    app.map.infoWindow.close();\n    this.closeDrawer();\n    this.toggleDrawer();\n  },\n\n  // Called when the marker or list item is clicked\n  clickHandler: function(place) {\n    // console.log('clickHandler'); // REMOVE\n    var plc = place || this;\n\n    // Call for data\n    app.wiki.getWiki(plc);\n    app.foursquare.findPlace(plc);\n    // app.map.getPlaceDetails(plc);\n\n    // Handle map actions\n    app.map.infoWindow.close();\n    app.viewmodel.closeDrawer();\n    app.viewmodel.setCurrentPlace(plc);\n    app.viewmodel.toggleBounce();\n    // app.viewmodel.markerSetup(plc);\n\n    // Timeout to avoid two calls from success callbacks\n    setTimeout(function() {\n      app.viewmodel.setInfoWindow(plc);\n      // Hide the drawer button while infowindow is open\n      $('#drawer-btn').removeClass('closed');\n      $('#drawer-btn').addClass('open');\n    }, 300);\n  },\n\n  placeFilter: function() {\n    // console.log('placeFilter'); // REMOVE\n    var self = this;\n    // A cushion to allow inputText to change\n    setTimeout(function() {\n      // Get the matching places\n      if (self.inputText()) {\n        var matches = self.places().filter(function(place) {\n          var name = place.name().toLowerCase();\n          var input = self.inputText().toLowerCase();\n          return name.indexOf(input) === 0;\n        });\n\n        // Set markers and list items to hidden\n        self.places().forEach(function(place) {\n          place.marker.setMap(null);\n          place.show(false);\n        });\n\n        // Add remaining places to the map and list\n        matches.forEach(function(place) {\n          place.marker.setMap(app.map.map);\n          place.show(true);\n        });\n      } else {\n        self.places().forEach(function(place) {\n          place.marker.setMap(app.map.map);\n          place.show(true);\n        });\n      }\n    }, 100);\n\n    // Must return true to allow default behavior(Filling the input box)\n    return true;\n  },\n\n  resetFilter: function() {\n    app.viewmodel.inputText('');\n    $('#drawer-top input').trigger('input');\n  },\n\n  toggleBounce: function() {\n    // console.log('Map toggleBounce'); // REMOVE\n    if (app.viewmodel.curPlace().marker.getAnimation()) {\n      app.viewmodel.curPlace().marker.setAnimation(null);\n    } else {\n      var marker = app.viewmodel.curPlace().marker;\n      marker.setAnimation(google.maps.Animation.BOUNCE);\n    }\n  },\n\n  setInfoWindow: function(place) {\n    var content = $('#infowindow').html();\n\n    app.map.infoWindow.setContent(content);\n    app.map.infoWindow.open(app.map.map, place.marker);\n  },\n\n  toggleDrawer: function() {\n    // console.log('toggleDrawer'); // REMOVE\n    var els = document.getElementsByClassName('drawer');\n    $(els).toggleClass('closed open');\n    // app.viewmodel.inputText('');\n  },\n\n  closeDrawer: function() {\n    // console.log('closeDrawer'); // REMOVE\n    // Reset drawer button if infowindow is open\n    var el = $('#drawer-btn');\n    if (el.hasClass('open')) {\n      el.removeClass('open');\n      el.addClass('closed');\n    }\n    // Close the drawer if it is open\n    if ($('#drawer-content').hasClass('open')) {\n      app.viewmodel.toggleDrawer();\n    }\n  },\n\n  openModal: function() {\n    $('#modal').css('display', 'initial');\n    console.log('Open Modal');\n  },\n\n  closeModal: function() {\n    $('#modal').css('display', 'none');\n  },\n\n  init: function() {\n    // console.log('init'); // REMOVE\n    var button = document.getElementById('drawer-btn');\n    button.addEventListener('click', app.viewmodel.toggleDrawer);\n  }\n};\n\napp.viewmodel.init();\n// Moved to map.getPlaces to avoid typeErrors on current place\n// ko.applyBindings(app.viewmodel);\n"],"sourceRoot":"/source/"}