{"version":3,"sources":["viewModel.js"],"names":["app","viewmodel","mapError","ko","observable","places","observableArray","curMarker","curPlace","inputText","frsqr","errorMsg","infoWindow","drawerOpen","showModal","Place","place","this","show","name","rating","open","opening_hours","photos","photo","url","height","width","attributions","html_attributions","data","detailsIcon","details","marker","map","createMarker","wikiInfo","frSqrInfo","WikiPage","page","content","extract","fullurl","fourSquare","info","tips","mapping","fromJS","frSqrTips","PlaceDetails","address","formatted_address","phone","formatted_phone_number","website","reviews","Reviews","arr","forEach","review","push","author","author_name","authorUrl","author_url","text","time","addError","msg","setTimeout","clearErrors","setCurrentPlace","getAnimation","toggleBounce","toggleDetails","undefined","getPlaceDetails","clickContactInfo","$","trigger","close","toggleDrawer","clickHandler","plc","wiki","getWiki","foursquare","findPlace","setInfoWindow","placeFilter","self","matches","filter","toLowerCase","input","indexOf","setMap","resetFilter","html","setContent","setAnimation","google","maps","Animation","BOUNCE","setModal"],"mappings":"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","file":"main.min.js","sourcesContent":["/* global app ko $ google document */\n\napp.viewmodel = app.viewmodel || {};\n\napp.viewmodel = {\n  mapError: ko.observable(),\n  places: ko.observableArray(),\n  curMarker: null,\n  curPlace: ko.observable(),\n  inputText: ko.observable(''),\n  frsqr: null,\n  errorMsg: ko.observableArray([]),\n  infoWindow: ko.observable(false),\n  drawerOpen: ko.observable(false),\n  showModal: ko.observable(false),\n\n/* ************* */\n/* Constructors */\n/* ************ */\n  Place: function(place) {\n    this.show = ko.observable(true);\n\n    // Info returned from map.getPlaces\n    this.name = ko.observable(place.name);\n    this.rating = ko.observable(place.rating);\n    this.open = ko.observable(\n      place.opening_hours ? 'Open Now' : 'Closed' || 'Hours not available'\n    );\n    if (place.photos) {\n      this.photo = ko.observable({\n        url: ko.observable(place.photos[0].url),\n        height: ko.observable(place.photos[0].height),\n        width: ko.observable(place.photos[0].width),\n        attributions: ko.observable(place.photos[0].html_attributions)\n      } || {});\n    } else {\n      this.photo = ko.observable('none');\n    }\n    this.data = place;\n    this.detailsIcon = ko.observable('fa fa-chevron-circle-up');\n\n    // Info from elsewhere\n    this.details = ko.observable();\n    this.marker = app.map.createMarker(this);\n    this.wikiInfo = ko.observable();\n    this.frSqrInfo = ko.observable();\n  },\n\n  WikiPage: function(page) {\n    this.content = ko.observable(page.extract);\n    this.url = ko.observable(page.fullurl);\n  },\n\n  fourSquare: function(info, tips, place) {\n    // Map FourSquare responses to observables\n    var frSqrInfo = ko.mapping.fromJS(info, {});\n    var frSqrTips = ko.mapping.fromJS(tips, {});\n    // Create a child object for tips response\n    frSqrInfo.tips = frSqrTips;\n    // Assign the info to the place\n    place.frSqrInfo(frSqrInfo);\n  },\n\n  PlaceDetails: function(details) {\n    this.show = ko.observable(true);\n    this.address = ko.observable(details.formatted_address);\n    this.phone = ko.observable(details.formatted_phone_number);\n    this.photos = ko.observableArray(details.photos);\n    this.rating = ko.observable(details.rating);\n    this.website = ko.observable(details.website);\n    this.reviews = ko.observableArray(\n      new app.viewmodel.Reviews(details.reviews)\n    );\n  },\n\n  Reviews: function(reviews) {\n    var arr = [];\n    reviews.forEach(function(review) {\n      arr.push({\n        author: ko.observable(review.author_name),\n        authorUrl: ko.observable(review.author_url),\n        text: ko.observable(review.text),\n        time: ko.observable(review.time)\n      });\n    });\n    return arr;\n  },\n\n/* **************** */\n/* Helper Functions */\n/* **************** */\n  addError: function(msg) {\n    this.errorMsg = this.errorMsg || ko.observableArray([]);\n    this.errorMsg.push(msg);\n    setTimeout(function() {\n      app.viewmodel.clearErrors();\n    }, 2000);\n  },\n\n  clearErrors: function() {\n    this.errorMsg([]);\n  },\n\n  setCurrentPlace: function(place) {\n    if (app.viewmodel.curPlace().marker.getAnimation()) {\n      app.viewmodel.toggleBounce();\n    }\n    app.viewmodel.curPlace(place);\n  },\n\n  toggleDetails: function(place) {\n    if (place.details() !== undefined && place.details().show() === true) {\n      place.details().show(false);\n      place.detailsIcon('fa fa-chevron-circle-up');\n    } else {\n      app.map.getPlaceDetails(place);\n      app.viewmodel.setCurrentPlace(place);\n      place.detailsIcon('fa fa-chevron-circle-down');\n    }\n  },\n\n  clickContactInfo: function() {\n    this.inputText(this.curPlace().name());\n    $('#drawer-top input').trigger('input');\n    this.toggleDetails(app.viewmodel.curPlace());\n    app.map.infoWindow.close();\n    this.toggleDrawer();\n  },\n\n  // Called when the marker or list item is clicked\n  clickHandler: function(place) {\n    var plc = place || this;\n\n    // Call for data\n    app.wiki.getWiki(plc);\n    app.foursquare.findPlace(plc);\n\n    // Handle map actions\n    app.map.infoWindow.close();\n    if (app.viewmodel.drawerOpen()) {\n      app.viewmodel.toggleDrawer();\n    }\n    app.viewmodel.setCurrentPlace(plc);\n    app.viewmodel.toggleBounce();\n\n    // Timeout to avoid two calls from success callbacks\n    setTimeout(function() {\n      app.viewmodel.setInfoWindow(plc);\n    }, 300);\n  },\n\n  placeFilter: function() {\n    var self = this;\n    // A cushion to allow inputText to change\n    setTimeout(function() {\n      // Get the matching places\n      if (self.inputText()) {\n        var matches = self.places().filter(function(place) {\n          var name = place.name().toLowerCase();\n          var input = self.inputText().toLowerCase();\n          return name.indexOf(input) === 0;\n        });\n\n        // Set markers and list items to hidden\n        self.places().forEach(function(place) {\n          place.marker.setMap(null);\n          place.show(false);\n        });\n\n        // Add remaining places to the map and list\n        matches.forEach(function(place) {\n          place.marker.setMap(app.map.map);\n          place.show(true);\n        });\n      } else {\n        // Set all place markers on the map\n        self.places().forEach(function(place) {\n          place.marker.setMap(app.map.map);\n          place.show(true);\n        });\n      }\n    }, 100);\n\n    // Must return true to allow default behavior (Filling the input box)\n    return true;\n  },\n\n  resetFilter: function() {\n    app.viewmodel.inputText('');\n    $('#drawer-top input').trigger('input');\n  },\n\n  setInfoWindow: function(place) {\n    var content = $('#infowindow').html();\n\n    app.map.infoWindow.setContent(content);\n    app.map.infoWindow.open(app.map.map, place.marker);\n    // Hide the drawer button while infowindow is open\n    app.viewmodel.infoWindow(true);\n  },\n\n  // Strictly view related (create a separate file if there is more)\n  toggleBounce: function() {\n    if (app.viewmodel.curPlace().marker.getAnimation()) {\n      app.viewmodel.curPlace().marker.setAnimation(null);\n    } else {\n      var marker = app.viewmodel.curPlace().marker;\n      marker.setAnimation(google.maps.Animation.BOUNCE);\n    }\n  },\n\n  toggleDrawer: function() {\n    app.viewmodel.drawerOpen(!app.viewmodel.drawerOpen());\n  },\n\n  setModal: function() {\n    app.viewmodel.showModal(!app.viewmodel.showModal());\n  },\n};\n"],"sourceRoot":"/source/"}