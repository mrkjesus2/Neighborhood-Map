{"version":3,"sources":["map.js"],"names":["app","map","init","home","lat","lng","el","document","getElementById","this","google","maps","Map","center","zoom","minZoom","maxZoom","mapTypeControl","placesApi","places","PlacesService","event","addListenerOnce","getPlaces","createInfoWindow","place","content","infoWindow","console","log","open","marker","viewmodel","clickHandler","infoWindowLoaded","InfoWindow","maxWidth","$","window","width","addListener","ko","applyBindings","createPlaces","forEach","idx","plc","Place","push","placeList","name","curPlace","autocomplete","storePlaces","localStorage","setItem","JSON","stringify","retrievePlaces","parse","geometry","location","sameBoundsCheck","getBounds","request","bounds","types","nearbySearch","results","status","setPhotoUrls","msg","addError","oldBounds","equals","photos","url","getUrl","maxHeight","getPlaceDetails","placeId","data","place_id","getDetails","details","deets","PlaceDetails","createMarker","plcloc","image","icon","scaledSize","Size","Marker","animation","Animation","DROP","attribution","source","title"],"mappings":"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","file":"main.min.js","sourcesContent":["/* global app document google $ window ko localStorage */\napp.map = app.map || {};\n\n(function() {\n  app.map = {\n    // Callback function for Google Maps - Initialize the Map\n    init: function() {\n      // console.log('map.init'); // REMOVE\n      var home = {lat: 39.927677, lng: -75.171909};\n      var el = document.getElementById('map-container');\n\n      this.map = new google.maps.Map(el, {\n        center: home,\n        zoom: 14,\n        minZoom: 12,\n        maxZoom: 18,\n        mapTypeControl: false\n      });\n      this.placesApi = new google.maps.places.PlacesService(app.map.map);\n\n      // Load places once the maps bounds are set\n      google.maps.event.addListenerOnce(\n        this.map, 'bounds_changed', this.getPlaces\n      );\n    },\n\n    // with a little help from 'http://jsfiddle.net/G6MXd/4/'\n    createInfoWindow: function(place) {\n      // console.log('createInfoWindow'); // REMOVE\n      var content =\n        '<div id=\"test\"\\\n          data-bind=\"template: {name: \\'infowindow\\', data: curPlace}\">\\\n        </div>';\n\n      //  Set up infoWindow if it doesn't exist\n      if (!this.infoWindow) {\n        console.log('Initializing infoWindow'); // REMOVE\n\n        var infoWindowLoaded;\n\n        this.infoWindow = new google.maps.InfoWindow({\n          maxWidth: $(window).width() * 0.7,\n          content: content\n        });\n\n        // Apply bindings once the window is attached to DOM\n        google.maps.event.addListener(this.infoWindow, 'domready', function() {\n          if (!infoWindowLoaded) {\n            ko.applyBindings(app.viewmodel, $('#test')[0]);\n            infoWindowLoaded = true;\n          }\n        });\n\n        // Show the drawer button when infowindow closes\n        google.maps.event.addListener(this.infoWindow, 'closeclick', function() {\n          app.viewmodel.infoWindow(false);\n        });\n\n        // Hide the drawer button while window is open\n        app.viewmodel.infoWindow(true);\n\n        app.viewmodel.clickHandler(place);\n\n      // Handle when the infoWindow exists\n      } else {\n        console.log('Info Window Else Statement'); // REMOVE\n        this.infoWindow.open(app.map.map, place.marker);\n\n        app.viewmodel.clickHandler(place);\n      }\n    },\n\n    createPlaces: function(places) {\n      // console.log('createPlaces'); // REMOVE\n      places.forEach(function(place, idx) {\n        var plc = new app.viewmodel.Place(place);\n\n        app.viewmodel.places.push(plc);\n        app.viewmodel.placeList.push(plc.name());\n        if (idx === 1) {\n          app.viewmodel.curPlace(plc);\n        }\n      });\n      app.viewmodel.autocomplete();\n    },\n\n    // Likely against TOS, but figure it's fine for educational purposes\n    storePlaces: function(places) {\n      // console.log('storePlaces'); // REMOVE\n      localStorage.setItem('places', JSON.stringify(places));\n    },\n\n    retrievePlaces: function() {\n      // console.log('retrievePlaces'); // REMOVE\n      var places = JSON.parse(localStorage.places);\n      places.forEach(function(place) {\n        var lat = place.geometry.location.lat;\n        var lng = place.geometry.location.lng;\n        // Make lat/lng into functions to match API results\n        place.geometry.location.lat = function() {\n          return lat;\n        };\n        place.geometry.location.lng = function() {\n          return lng;\n        };\n      });\n      return places;\n    },\n\n    // Get a list of places from Google Maps\n    getPlaces: function() {\n      // console.log('getPlaces'); // REMOVE\n      if (localStorage.places && app.map.sameBoundsCheck()) {\n        console.log('Creating places from storage');\n        app.map.createPlaces(app.map.retrievePlaces());\n        ko.applyBindings(app.viewmodel, $('.container')[0]);\n      } else {\n        localStorage.setItem('bounds', JSON.stringify(app.map.map.getBounds()));\n        // Variables for the request\n        var request = {\n          bounds: app.map.map.getBounds(),\n          types: ['art_gallery', 'museum', 'park']\n        };\n\n        // Call the Places API\n        app.map.placesApi.nearbySearch(request, function(results, status) {\n          console.log('Calling Places API');\n          if (status === 'OK') {\n            app.map.setPhotoUrls(results);\n            app.map.storePlaces(results);\n            app.map.createPlaces(results);\n          } else {\n            console.log('We have a places error');\n            var msg = 'Google Places Error: ' + status;\n            app.viewmodel.addError(msg);\n          }\n          ko.applyBindings(app.viewmodel, $('.container')[0]);\n        });\n      }\n    },\n\n    sameBoundsCheck: function() {\n      // console.log('sameBoundsCheck'); // REMOVE\n      if (localStorage.bounds) {\n        var oldBounds = JSON.parse(localStorage.bounds);\n        return app.map.map.getBounds().equals(oldBounds);\n      }\n      return false;\n    },\n\n    setPhotoUrls: function(places) {\n      // console.log('setPhotoUrls'); // REMOVE\n      places.forEach(function(place) {\n        if (place.photos) {\n          var url = place.photos[0].getUrl({maxWidth: 200,\n                                            maxHeight: 300});\n          place.photos[0].url = url;\n        }\n      });\n    },\n\n    getPlaceDetails: function(place) {\n      // console.log('getPlaceDetails'); // REMOVE\n      var request = {\n        placeId: place.data.place_id\n      };\n      // Call the Places API, add details to the place\n      app.map.placesApi.getDetails(request, function(details, status) {\n        if (status === 'OK') {\n          var deets = new app.viewmodel.PlaceDetails(details);\n          place.details(deets);\n        } else {\n          var msg = 'Google Places Error while getting details: ' + status;\n          app.viewmodel.addError(msg);\n        }\n      });\n    },\n\n    createMarker: function(place) {\n      // console.log('createMarker'); // REMOVE\n      // Location for the Marker\n      var plcloc = place.data.geometry.location;\n      // Set icon and icon size\n      var image = {\n        url: place.data.icon,\n        scaledSize: new google.maps.Size(50, 50)\n      };\n      // Create the marker\n      var marker = new google.maps.Marker({\n        animation: google.maps.Animation.DROP,\n        attribution: {source: 'mrkjesus2.github.io/Neighborhood-Map'},\n        icon: image,\n        map: app.map.map,\n        place: {\n          location: {lat: plcloc.lat(), lng: plcloc.lng()},\n          placeId: place.data.place_id\n        },\n        title: place.data.name\n      });\n\n      google.maps.event.addListener(marker, 'click', function() {\n        // app.viewmodel.clickHandler(place);\n        app.map.createInfoWindow(place); // test\n      });\n      return marker;\n    }\n  };\n})();\n"],"sourceRoot":"/source/"}