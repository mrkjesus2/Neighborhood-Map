{"version":3,"sources":["viewModel.js"],"names":["app","viewmodel","places","ko","observableArray","curMarker","curPlace","observable","inputText","frsqr","errorMsg","Place","place","this","show","name","rating","open","opening_hours","photos","photo","url","getUrl","height","width","attributions","html_attributions","data","detailsIcon","details","marker","map","createMarker","wikiInfo","frSqrInfo","getPhoto","WikiPage","page","content","extract","fullurl","fourSquare","info","tips","mapping","fromJS","frSqrTips","PlaceDetails","address","formatted_address","phone","formatted_phone_number","website","reviews","Reviews","arr","forEach","review","push","author","author_name","authorUrl","author_url","text","time","addError","msg","setTimeout","clearErrors","setCurrentPlace","getAnimation","toggleBounce","toggleDetails","undefined","getPlaceDetails","clickContactInfo","$","trigger","infoWindow","close","closeDrawer","toggleDrawer","clickHandler","plc","wiki","getWiki","foursquare","findPlace","setInfoWindow","removeClass","addClass","placeFilter","self","matches","filter","toLowerCase","input","indexOf","setMap","resetFilter","setAnimation","google","maps","Animation","BOUNCE","html","setContent","els","document","getElementsByClassName","toggleClass","el","hasClass","openModal","css","console","log","closeModal","init","button","getElementById","addEventListener"],"mappings":"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","file":"main.min.js","sourcesContent":["// TODO: Get rid of 'REMOVE' lines\n/* global app ko $ google document */\n\napp.viewmodel = app.viewmodel || {};\n\napp.viewmodel = {\n  places: ko.observableArray(),\n  curMarker: null,\n  curPlace: ko.observable(),\n  inputText: ko.observable(''),\n  frsqr: null,\n  errorMsg: ko.observableArray([]),\n\n/* ************* */\n/* Constructors */\n/* ************ */\n  Place: function(place) {\n    this.show = ko.observable(true);\n\n    // Info returned from map.getPlaces\n    this.name = ko.observable(place.name);\n    this.rating = ko.observable(place.rating);\n    this.open = ko.observable(\n      place.opening_hours ? 'Open Now' : 'Closed' || 'Hours not available'\n    );\n    if (place.photos) {\n      this.photo = ko.observable({\n        url: ko.observable(place.photos[0].getUrl),\n        height: ko.observable(place.photos[0].height),\n        width: ko.observable(place.photos[0].width),\n        attributions: ko.observable(place.photos[0].html_attributions)\n      } || {});\n    } else {\n      this.photo = ko.observable('none');\n    }\n    this.data = place;\n    this.detailsIcon = ko.observable('fa fa-chevron-circle-up');\n\n    // Info from elsewhere\n    this.details = ko.observable();\n    this.marker = app.map.createMarker(this);\n    this.wikiInfo = ko.observable();\n    this.frSqrInfo = ko.observable();\n    // this.frSqrInfo.tips = ko.observable();\n    // console.log('Place Constructor');  // REMOVE\n  },\n\n// TODO: This function probably needs to written for Places API\n  // params - place, url, width, height\n  getPhoto: function() {\n\n  },\n\n  WikiPage: function(page) {\n    this.content = ko.observable(page.extract);\n    this.url = ko.observable(page.fullurl);\n  },\n\n  fourSquare: function(info, tips, place) {\n    // console.log('FourSquare Constructor'); // REMOVE\n    // Map FourSquare responses to observables\n    var frSqrInfo = ko.mapping.fromJS(info, {});\n    var frSqrTips = ko.mapping.fromJS(tips, {});\n    // Create a child object for tips response\n    frSqrInfo.tips = frSqrTips;\n    // Assign the info to the place\n    place.frSqrInfo(frSqrInfo);\n  },\n\n  PlaceDetails: function(details) {\n    this.show = ko.observable(true);\n    this.address = ko.observable(details.formatted_address);\n    this.phone = ko.observable(details.formatted_phone_number);\n    this.photos = ko.observableArray(details.photos);\n    this.rating = ko.observable(details.rating);\n    this.website = ko.observable(details.website);\n    this.reviews = ko.observableArray(new app.viewmodel.Reviews(details.reviews));\n    // console.log('PlaceDetails'); // REMOVE\n  },\n\n  Reviews: function(reviews) {\n    var arr = [];\n    reviews.forEach(function(review) {\n      arr.push({\n        author: ko.observable(review.author_name),\n        authorUrl: ko.observable(review.author_url),\n        text: ko.observable(review.text),\n        time: ko.observable(review.time)\n      });\n    });\n    return arr;\n  },\n\n/* **************** */\n/* Helper Functions */\n/* **************** */\n  addError: function(msg) {\n    this.errorMsg = this.errorMsg || ko.observableArray([]);\n    this.errorMsg.push(msg);\n    setTimeout(function() {\n      app.viewmodel.clearErrors();\n    }, 2000);\n  },\n\n  clearErrors: function() {\n    this.errorMsg([]);\n  },\n\n  setCurrentPlace: function(place) {\n    // console.log('setCurrentPlace'); // REMOVE\n    if (app.viewmodel.curPlace().marker.getAnimation()) {\n      app.viewmodel.toggleBounce();\n    }\n    app.viewmodel.curPlace(place);\n  },\n\n  toggleDetails: function(place) {\n    if (place.details() !== undefined && place.details().show() === true) {\n      place.details().show(false);\n      place.detailsIcon('fa fa-chevron-circle-up');\n    } else {\n      app.map.getPlaceDetails(place);\n      app.viewmodel.setCurrentPlace(place);\n      place.detailsIcon('fa fa-chevron-circle-down');\n    }\n  },\n\n  clickContactInfo: function() {\n    this.inputText(this.curPlace().name());\n    $('#drawer-top input').trigger('input');\n    this.toggleDetails(app.viewmodel.curPlace());\n    app.map.infoWindow.close();\n    this.closeDrawer();\n    this.toggleDrawer();\n  },\n\n  // Called when the marker or list item is clicked\n  clickHandler: function(place) {\n    // console.log('clickHandler'); // REMOVE\n    var plc = place || this;\n\n    // Call for data\n    app.wiki.getWiki(plc);\n    app.foursquare.findPlace(plc);\n    // app.map.getPlaceDetails(plc);\n\n    // Handle map actions\n    app.map.infoWindow.close();\n    app.viewmodel.closeDrawer();\n    app.viewmodel.setCurrentPlace(plc);\n    app.viewmodel.toggleBounce();\n    // app.viewmodel.markerSetup(plc);\n\n    // Timeout to avoid two calls from success callbacks\n    setTimeout(function() {\n      app.viewmodel.setInfoWindow(plc);\n      // Hide the drawer button while infowindow is open\n      $('#drawer-btn').removeClass('closed');\n      $('#drawer-btn').addClass('open');\n    }, 300);\n  },\n\n  placeFilter: function() {\n    // console.log('placeFilter'); // REMOVE\n    var self = this;\n    // A cushion to allow inputText to change\n    setTimeout(function() {\n      // Get the matching places\n      if (self.inputText()) {\n        var matches = self.places().filter(function(place) {\n          var name = place.name().toLowerCase();\n          var input = self.inputText().toLowerCase();\n          return name.indexOf(input) === 0;\n        });\n\n        // Set markers and list items to hidden\n        self.places().forEach(function(place) {\n          place.marker.setMap(null);\n          place.show(false);\n        });\n\n        // Add remaining places to the map and list\n        matches.forEach(function(place) {\n          place.marker.setMap(app.map.map);\n          place.show(true);\n        });\n      } else {\n        self.places().forEach(function(place) {\n          place.marker.setMap(app.map.map);\n          place.show(true);\n        });\n      }\n    }, 100);\n\n    // Must return true to allow default behavior(Filling the input box)\n    return true;\n  },\n\n  resetFilter: function() {\n    app.viewmodel.inputText('');\n    $('#drawer-top input').trigger('input');\n  },\n\n  toggleBounce: function() {\n    // console.log('Map toggleBounce'); // REMOVE\n    if (app.viewmodel.curPlace().marker.getAnimation()) {\n      app.viewmodel.curPlace().marker.setAnimation(null);\n    } else {\n      var marker = app.viewmodel.curPlace().marker;\n      marker.setAnimation(google.maps.Animation.BOUNCE);\n    }\n  },\n\n  setInfoWindow: function(place) {\n    var content = $('#infowindow').html();\n\n    app.map.infoWindow.setContent(content);\n    app.map.infoWindow.open(app.map.map, place.marker);\n  },\n\n  toggleDrawer: function() {\n    // console.log('toggleDrawer'); // REMOVE\n    var els = document.getElementsByClassName('drawer');\n    $(els).toggleClass('closed open');\n    // app.viewmodel.inputText('');\n  },\n\n  closeDrawer: function() {\n    // console.log('closeDrawer'); // REMOVE\n    // Reset drawer button if infowindow is open\n    var el = $('#drawer-btn');\n    if (el.hasClass('open')) {\n      el.removeClass('open');\n      el.addClass('closed');\n    }\n    // Close the drawer if it is open\n    if ($('#drawer-content').hasClass('open')) {\n      app.viewmodel.toggleDrawer();\n    }\n  },\n\n  openModal: function() {\n    $('#modal').css('display', 'initial');\n    console.log('Open Modal');\n  },\n\n  closeModal: function() {\n    $('#modal').css('display', 'none');\n  },\n\n  init: function() {\n    // console.log('init'); // REMOVE\n    var button = document.getElementById('drawer-btn');\n    button.addEventListener('click', app.viewmodel.toggleDrawer);\n  }\n};\n\napp.viewmodel.init();\n// Moved to map.getPlaces to avoid typeErrors on current place\n// ko.applyBindings(app.viewmodel);\n"],"sourceRoot":"/source/"}