{"version":3,"sources":["map.js"],"names":["app","map","init","home","lat","lng","el","document","getElementById","this","google","maps","Map","center","zoom","minZoom","maxZoom","mapTypeControl","placesApi","places","PlacesService","infoWindow","InfoWindow","maxWidth","$","window","width","event","addListener","removeClass","addClass","setTimeout","css","addListenerOnce","getPlaces","createPlaces","forEach","place","idx","plc","viewmodel","Place","push","console","log","curPlace","storePlaces","localStorage","setItem","JSON","stringify","retrievePlaces","parse","geometry","location","ko","applyBindings","request","bounds","getBounds","types","nearbySearch","results","status","setPhotoUrls","msg","addError","photos","url","getUrl","maxHeight","getPlaceDetails","placeId","data","place_id","getDetails","details","deets","PlaceDetails","createMarker","plcloc","marker","Marker","animation","Animation","DROP","attribution","source","icon","title","name","clickHandler"],"mappings":"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","file":"main.min.js","sourcesContent":["/* global app document google $ window ko localStorage */\napp.map = app.map || {};\n\n(function() {\n  app.map = {\n    // Callback function for Google Maps - Initialize the Map\n    // Calls getPlaces and createMarker to fill ViewModel places array\n    init: function() {\n      var home = {lat: 39.927677, lng: -75.171909};\n      var el = document.getElementById('map-container');\n\n      this.map = new google.maps.Map(el, {\n        center: home,\n        zoom: 14,\n        minZoom: 12,\n        maxZoom: 18,\n        mapTypeControl: false\n      });\n      // console.log('Map init'); // REMOVE\n      this.placesApi = new google.maps.places.PlacesService(app.map.map);\n      this.infoWindow = new google.maps.InfoWindow({\n        maxWidth: $(window).width() * 0.7}\n      );\n      // Show the drawer button when infowindow closes\n      google.maps.event.addListener(this.infoWindow, 'closeclick', function() {\n        $('#drawer-btn').removeClass('open');\n        $('#drawer-btn').addClass('closed');\n      });\n\n      // Show error message - if maps can't be reached it will be visible\n      setTimeout(function() {\n        $('#maps-error').css('display', 'inline');\n      }, 5000);\n      // Load places once the maps bounds are set\n      google.maps.event.addListenerOnce(this.map, 'bounds_changed', this.getPlaces);\n    },\n\n    createPlaces: function(places) {\n      places.forEach(function(place, idx) {\n        var plc = new app.viewmodel.Place(place);\n\n        app.viewmodel.places.push(plc);\n        if (idx === 1) {\n          console.log('set current place');\n          app.viewmodel.curPlace(plc);\n        }\n      });\n    },\n\n    // Likely against TOS, but figure it's fine for educational purposes\n    storePlaces: function(places) {\n      localStorage.setItem('places', JSON.stringify(places));\n    },\n\n    retrievePlaces: function() {\n      var places = JSON.parse(localStorage.places);\n      places.forEach(function(place) {\n        var lat = place.geometry.location.lat;\n        var lng = place.geometry.location.lng;\n        // Make lat/lng into functions to match API results\n        place.geometry.location.lat = function() {\n          return lat;\n        };\n        place.geometry.location.lng = function() {\n          return lng;\n        };\n      });\n      return places;\n    },\n    // Get a list of places from Google Maps\n    getPlaces: function() {\n      // console.log('Map getPlaces'); // REMOVE\n      if (localStorage.places) {\n        console.log('Creating places from storage');\n        app.map.createPlaces(app.map.retrievePlaces());\n        ko.applyBindings(app.viewmodel);\n      } else {\n        // Variables for the request\n        var request = {\n          bounds: app.map.map.getBounds(),\n          types: ['art_gallery', 'museum', 'park']\n        };\n\n        // Call the Places API\n        app.map.placesApi.nearbySearch(request, function(results, status) {\n          console.log('Calling Places API');\n          if (status === 'OK') {\n            // console.log(results[0]);\n            app.map.setPhotoUrls(results);\n            app.map.storePlaces(results);\n            app.map.createPlaces(results);\n          } else {\n            console.log('We have a places error');\n            var msg = 'Google Places Error: ' + status;\n            app.viewmodel.addError(msg);\n          }\n          ko.applyBindings(app.viewmodel);\n        });\n      }\n    },\n\n    setPhotoUrls: function(places) {\n      places.forEach(function(place) {\n        // console.log(place.photos);\n        if (place.photos) {\n          // TODO: Right image size?\n          var url = place.photos[0].getUrl({maxWidth: 200,\n                                            maxHeight: 200});\n          console.log(typeof url);\n          place.photos[0].url = url;\n          // console.log(place.photos[0]);\n        }\n      });\n    },\n\n    getPlaceDetails: function(place) {\n      // console.log('Map getPlaceDetails'); // REMOVE\n      var request = {\n        placeId: place.data.place_id\n      };\n      // Call the Places API, add details to the place\n      app.map.placesApi.getDetails(request, function(details, status) {\n        console.log('status', status);\n        if (status === 'OK') {\n          var deets = new app.viewmodel.PlaceDetails(details);\n          place.details(deets);\n        } else {\n          var msg = 'Google Places Error while getting details: ' + status;\n          app.viewmodel.addError(msg);\n        }\n      });\n    },\n\n    createMarker: function(place) {\n      // console.log('Map createMarker'); // REMOVE\n      // Location for the Marker\n      var plcloc = place.data.geometry.location;\n      // Create the marker\n      var marker = new google.maps.Marker({\n        animation: google.maps.Animation.DROP,\n        attribution: {source: 'mrkjesus2.github.io/Neighborhood-Map'},\n        icon: place.data.icon,\n        map: app.map.map,\n        // optimized: false,  // If problems with animation, uncomment //REMOVE\n        place: {\n          location: {lat: plcloc.lat(), lng: plcloc.lng()},\n          placeId: place.data.place_id\n        },\n        title: place.data.name\n      });\n\n      google.maps.event.addListener(marker, 'click', function() {\n        app.viewmodel.clickHandler(place);\n      });\n      return marker;\n    }\n  };\n})();\n"],"sourceRoot":"/source/"}