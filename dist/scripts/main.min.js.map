{"version":3,"sources":["map.js"],"names":["app","map","init","home","lat","lng","el","document","getElementById","this","google","maps","Map","center","zoom","minZoom","maxZoom","mapTypeControl","placesApi","places","PlacesService","infoWindow","InfoWindow","maxWidth","$","window","width","event","addListener","viewmodel","showDrawerBtn","setTimeout","css","addListenerOnce","getPlaces","createPlaces","forEach","place","idx","plc","Place","push","curPlace","storePlaces","localStorage","setItem","JSON","stringify","retrievePlaces","parse","geometry","location","sameBoundsCheck","console","log","ko","applyBindings","getBounds","request","bounds","types","nearbySearch","results","status","setPhotoUrls","msg","addError","oldBounds","equals","photos","url","getUrl","maxHeight","getPlaceDetails","placeId","data","place_id","getDetails","details","deets","PlaceDetails","createMarker","plcloc","image","icon","scaledSize","Size","marker","Marker","animation","Animation","DROP","attribution","source","title","name","clickHandler"],"mappings":"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","file":"main.min.js","sourcesContent":["/* global app document google $ window ko localStorage */\napp.map = app.map || {};\n\n(function() {\n  app.map = {\n    // Callback function for Google Maps - Initialize the Map\n    init: function() {\n      var home = {lat: 39.927677, lng: -75.171909};\n      var el = document.getElementById('map-container');\n\n      this.map = new google.maps.Map(el, {\n        center: home,\n        zoom: 14,\n        minZoom: 12,\n        maxZoom: 18,\n        mapTypeControl: false\n      });\n      this.placesApi = new google.maps.places.PlacesService(app.map.map);\n      this.infoWindow = new google.maps.InfoWindow({\n        maxWidth: $(window).width() * 0.7}\n      );\n\n      // Show the drawer button when infowindow closes\n      google.maps.event.addListener(\n        this.infoWindow, 'closeclick', app.viewmodel.showDrawerBtn\n      );\n\n// TODO: Handle with knockout\n      // Show error message - if maps can't be reached, will be visible\n      setTimeout(function() {\n        $('#maps-error').css('display', 'inline');\n      }, 5000);\n      // Load places once the maps bounds are set\n      google.maps.event.addListenerOnce(\n        this.map, 'bounds_changed', this.getPlaces\n      );\n    },\n\n    createPlaces: function(places) {\n      places.forEach(function(place, idx) {\n        var plc = new app.viewmodel.Place(place);\n\n        app.viewmodel.places.push(plc);\n        if (idx === 1) {\n          app.viewmodel.curPlace(plc);\n        }\n      });\n    },\n\n    // Likely against TOS, but figure it's fine for educational purposes\n    storePlaces: function(places) {\n      localStorage.setItem('places', JSON.stringify(places));\n    },\n\n    retrievePlaces: function() {\n      var places = JSON.parse(localStorage.places);\n      places.forEach(function(place) {\n        var lat = place.geometry.location.lat;\n        var lng = place.geometry.location.lng;\n        // Make lat/lng into functions to match API results\n        place.geometry.location.lat = function() {\n          return lat;\n        };\n        place.geometry.location.lng = function() {\n          return lng;\n        };\n      });\n      return places;\n    },\n\n    // Get a list of places from Google Maps\n    getPlaces: function() {\n      if (localStorage.places && app.map.sameBoundsCheck()) {\n        console.log('Creating places from storage');\n        app.map.createPlaces(app.map.retrievePlaces());\n        ko.applyBindings(app.viewmodel);\n      } else {\n        localStorage.setItem('bounds', JSON.stringify(app.map.map.getBounds()));\n        // Variables for the request\n        var request = {\n          bounds: app.map.map.getBounds(),\n          types: ['art_gallery', 'museum', 'park']\n        };\n\n        // Call the Places API\n        app.map.placesApi.nearbySearch(request, function(results, status) {\n          console.log('Calling Places API');\n          if (status === 'OK') {\n            app.map.setPhotoUrls(results);\n            app.map.storePlaces(results);\n            app.map.createPlaces(results);\n          } else {\n            console.log('We have a places error');\n            var msg = 'Google Places Error: ' + status;\n            app.viewmodel.addError(msg);\n          }\n          ko.applyBindings(app.viewmodel);\n        });\n      }\n    },\n\n    sameBoundsCheck: function() {\n        var oldBounds = JSON.parse(localStorage.bounds);\n        return app.map.map.getBounds().equals(oldBounds);\n    },\n\n    setPhotoUrls: function(places) {\n      places.forEach(function(place) {\n        if (place.photos) {\n          var url = place.photos[0].getUrl({maxWidth: 200,\n                                            maxHeight: 300});\n          place.photos[0].url = url;\n        }\n      });\n    },\n\n    getPlaceDetails: function(place) {\n      var request = {\n        placeId: place.data.place_id\n      };\n      // Call the Places API, add details to the place\n      app.map.placesApi.getDetails(request, function(details, status) {\n        console.log('status', status);\n        if (status === 'OK') {\n          var deets = new app.viewmodel.PlaceDetails(details);\n          place.details(deets);\n        } else {\n          var msg = 'Google Places Error while getting details: ' + status;\n          app.viewmodel.addError(msg);\n        }\n      });\n    },\n\n    createMarker: function(place) {\n      // Location for the Marker\n      var plcloc = place.data.geometry.location;\n      // Set icon and icon size\n      var image = {\n        url: place.data.icon,\n        scaledSize: new google.maps.Size(50, 50)\n      };\n      // Create the marker\n      var marker = new google.maps.Marker({\n        animation: google.maps.Animation.DROP,\n        attribution: {source: 'mrkjesus2.github.io/Neighborhood-Map'},\n        icon: image,\n        map: app.map.map,\n        place: {\n          location: {lat: plcloc.lat(), lng: plcloc.lng()},\n          placeId: place.data.place_id\n        },\n        title: place.data.name\n      });\n\n      google.maps.event.addListener(marker, 'click', function() {\n        app.viewmodel.clickHandler(place);\n      });\n      return marker;\n    }\n  };\n})();\n"],"sourceRoot":"/source/"}